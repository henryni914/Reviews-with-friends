{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\henry\\\\Reviews-with-friends\\\\client\\\\src\\\\utils\\\\auth0context.js\",\n    _s = $RefreshSig$();\n\n// src/contexts/auth0-context.js\nimport React, { Component, createContext, useContext } from 'react';\nimport createAuth0Client from '@auth0/auth0-spa-js'; // create the context\n\nexport const Auth0Context = /*#__PURE__*/createContext();\nexport const useAuth0 = () => {\n  _s();\n\n  return useContext(Auth0Context);\n}; // <-- new\n// create a provider\n\n_s(useAuth0, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport class Auth0Provider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      auth0Client: null,\n      isLoading: true,\n      isAuthenticated: false,\n      user: null\n    };\n    this.config = {\n      domain: process.env.REACT_APP_AUTH0_DOMAIN,\n      client_id: process.env.REACT_APP_AUTH0_CLIENT_ID,\n      redirect_uri: window.location.origin\n    };\n\n    this.initializeAuth0 = async () => {\n      const auth0Client = await createAuth0Client(this.config);\n      this.setState({\n        auth0Client\n      }); // check to see if they have been redirected after login\n\n      if (window.location.search.includes('code=')) {\n        return this.handleRedirectCallback();\n      }\n\n      const isAuthenticated = await auth0Client.isAuthenticated();\n      const user = isAuthenticated ? await auth0Client.getUser() : null;\n      this.setState({\n        isLoading: false,\n        isAuthenticated,\n        user\n      });\n    };\n\n    this.handleRedirectCallback = async () => {\n      this.setState({\n        isLoading: true\n      });\n      await this.state.auth0Client.handleRedirectCallback();\n      const user = await this.state.auth0Client.getUser();\n      this.setState({\n        user,\n        isAuthenticated: true,\n        isLoading: false\n      });\n      window.history.replaceState({}, document.title, window.location.pathname);\n    };\n  }\n\n  componentDidMount() {\n    this.initializeAuth0();\n  }\n\n  render() {\n    const {\n      auth0Client,\n      isLoading,\n      isAuthenticated,\n      user\n    } = this.state;\n    const {\n      children\n    } = this.props;\n    const configObject = {\n      isLoading,\n      isAuthenticated,\n      user,\n      loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n      getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n      getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n      logout: (...p) => auth0Client.logout(...p)\n    };\n    return /*#__PURE__*/_jsxDEV(Auth0Context.Provider, {\n      value: configObject,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/henry/Reviews-with-friends/client/src/utils/auth0context.js"],"names":["React","Component","createContext","useContext","createAuth0Client","Auth0Context","useAuth0","Auth0Provider","state","auth0Client","isLoading","isAuthenticated","user","config","domain","process","env","REACT_APP_AUTH0_DOMAIN","client_id","REACT_APP_AUTH0_CLIENT_ID","redirect_uri","window","location","origin","initializeAuth0","setState","search","includes","handleRedirectCallback","getUser","history","replaceState","document","title","pathname","componentDidMount","render","children","props","configObject","loginWithRedirect","p","getTokenSilently","getIdTokenClaims","logout"],"mappings":"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","sourcesContent":["// src/contexts/auth0-context.js\r\n\r\nimport React, { Component, createContext, useContext } from 'react';\r\nimport createAuth0Client from '@auth0/auth0-spa-js';\r\n\r\n// create the context\r\nexport const Auth0Context = createContext();\r\n\r\nexport const useAuth0 = () => useContext(Auth0Context); // <-- new\r\n\r\n// create a provider\r\nexport class Auth0Provider extends Component {\r\n  state = { \r\n      auth0Client: null,\r\n      isLoading: true,\r\n      isAuthenticated: false,\r\n      user: null\r\n     };\r\n\r\n    config = {\r\n        domain: process.env.REACT_APP_AUTH0_DOMAIN,\r\n        client_id: process.env.REACT_APP_AUTH0_CLIENT_ID,\r\n        redirect_uri: window.location.origin\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.initializeAuth0();\r\n    }\r\n\r\n    initializeAuth0 = async () => {\r\n        const auth0Client = await createAuth0Client(this.config);\r\n        this.setState({ auth0Client });\r\n    \r\n        // check to see if they have been redirected after login\r\n        if (window.location.search.includes('code=')) {\r\n          return this.handleRedirectCallback();\r\n        }\r\n    \r\n        const isAuthenticated = await auth0Client.isAuthenticated();\r\n        const user = isAuthenticated ? await auth0Client.getUser() : null;\r\n        this.setState({ isLoading: false, isAuthenticated, user });\r\n      };\r\n\r\n      handleRedirectCallback = async () => {\r\n        this.setState({ isLoading: true });\r\n    \r\n        await this.state.auth0Client.handleRedirectCallback();\r\n        const user = await this.state.auth0Client.getUser();\r\n    \r\n        this.setState({ user, isAuthenticated: true, isLoading: false });\r\n        window.history.replaceState({}, document.title, window.location.pathname);\r\n      };\r\n    \r\n\r\n  render() {\r\n    const { auth0Client, isLoading, isAuthenticated, user} = this.state; \r\n    const { children } = this.props;\r\n\r\n    const configObject = { \r\n        isLoading,\r\n        isAuthenticated,\r\n        user,\r\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\r\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\r\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\r\n        logout: (...p) => auth0Client.logout(...p)\r\n     };\r\n\r\n    return (\r\n      <Auth0Context.Provider value={configObject}>\r\n        {children}\r\n      </Auth0Context.Provider>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}